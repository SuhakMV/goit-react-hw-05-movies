{"version":3,"file":"static/js/387.b96fab37.chunk.js","mappings":"kRAIMA,EAAW,sCAEXC,EAAU,mCAGHC,EAAgB,SAAAC,GAC3B,OAAOC,EAAAA,GAAAA,IAAA,UAPY,mDAOZ,oBACsBH,EADtB,gCACqDE,GAE7D,EAEYE,EAAc,SAACC,EAAOH,GACjC,OAAOC,EAAAA,GAAAA,IAAA,UAdU,4CAcV,oBACoBH,EADpB,iCACoDK,EADpD,iBACkEH,EADlE,wBAGR,EAEYI,EAAoB,SAACC,GAChC,OAAOJ,EAAAA,GAAAA,IAAA,UACFJ,GADE,OACSQ,EADT,oBAC4BP,EAD5B,mBAGR,EAEYQ,EAAY,SAACD,GACxB,OAAOJ,EAAAA,GAAAA,IAAA,UACFJ,GADE,OACSQ,EADT,4BACoCP,GAE5C,EAEYS,EAAe,SAACF,GAC3B,OAAOJ,EAAAA,GAAAA,IAAA,UACFJ,GADE,OACSQ,EADT,4BACoCP,EADpC,0BAGR,C,mICnCYU,EAAMC,EAAAA,GAAAA,IAAH,gKASHC,EAAQD,EAAAA,GAAAA,GAAH,+eAeLE,EAAWF,EAAAA,GAAAA,IAAH,8D,8JCxBRG,EAAOH,EAAAA,GAAAA,GAAH,sPAWJI,EAAWJ,EAAAA,GAAAA,GAAH,yMAURK,EAAUL,EAAAA,GAAAA,EAAH,kJ,kBC+BpB,EA/Ca,WACX,IAAQJ,GAAYU,EAAAA,EAAAA,MAAZV,QACR,GAAwBW,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCAId,gHAE2Bb,EAAAA,EAAAA,GAAUD,GAFrC,gBAEYe,EAFZ,EAEYA,KACRF,EAAQE,EAAKH,MAHjB,gDAKI,KAAM,SALV,0DAJc,sBACE,KAAZZ,GADU,mCAYdgB,EACD,GAAE,CAAChB,KAGF,SAAC,KAAD,WACE,SAACO,EAAD,UACGK,EAAKK,KAAI,YAA4D,IAAzDC,EAAwD,EAAxDA,GAAIC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eAC9C,OACE,UAACd,EAAD,YACE,gBACEe,IACEJ,EAAY,0CAC2BA,GAD3B,wFAIdK,IAAKF,KAEP,4BACE,SAACb,EAAD,UAAUW,KACV,UAACX,EAAD,0BACa,0BAAOY,YAZTH,EAiBlB,OAIR,C","sources":["api/api.js","components/App.styled.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst SEARCH_URL = 'https://api.themoviedb.org/3/search/movie';\nconst TRENDING_URL = 'https://api.themoviedb.org/3/trending/movie/week';\nconst ADIT_URL = 'https://api.themoviedb.org/3/movie/';\n\nconst API_KEY = '861782ee1fc6aacf939bc06e51306075';\n\n\nexport const fetchTrending = page => {\n  return axios.get(\n    `${TRENDING_URL}?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n};\n\nexport const fetchMovies = (query, page) => {\n  return axios.get(\n    `${SEARCH_URL}?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`\n  );\n};\n\nexport const fetchMovieDetails = (movieId) => {\n  return axios.get(\n    `${ADIT_URL}${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const fetchCast = (movieId) => {\n  return axios.get(\n    `${ADIT_URL}${movieId}/credits?api_key=${API_KEY}`\n  );\n};\n\nexport const fetchReviews = (movieId) => {\n  return axios.get(\n    `${ADIT_URL}${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n};","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  padding: 0 10px;\n  margin: 10px 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Title = styled.h1`\n  font-size: 30px;\n  display: flex;\n  text-transform: uppercase;\n  margin: 20px auto;\n  align-items: center;\n  justify-content: center;\n  :before {\n    content: '\\u2606'' ';\n  }\n  :after {\n    content: '\\u2606'' ';\n  }\n`;\n\nexport const MovieBox = styled.div`\n  padding: 0 10px;\n  margin: 10px 0;\n`;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  text-align: center;\n  display: grid;\n  max-width: calc(100vw - 20px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 20px;\n  padding: 30px 20px;\n  margin: 0 auto;\n`;\n\nexport const ListItem = styled.li`\n  width: 200px;\n  height: auto;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 5px;\n  display: inline-block;\n`;\n\nexport const BoxText = styled.p`\n  padding: 10px;\n  font-size: 15px;\n  margin: 0;\n  :first-child {\n    font-weight: 700;\n    padding-bottom: 0;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'api/api';\nimport { BoxText, List, ListItem } from './Cast.styled';\nimport { Box } from 'components/App.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    if (movieId === '') {\n      return;\n    }\n    async function getCast() {\n      try {\n        const { data } = await fetchCast(movieId);\n        setCast(data.cast);\n      } catch (error) {\n        error('error');\n      }\n    }\n    getCast();\n  }, [movieId]);\n\n  return (\n    <Box>\n      <List>\n        {cast.map(({ id, profile_path, name, character, original_title }) => {\n          return (\n            <ListItem key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                    : `https://thesource.sa.ua.edu/wp-content/uploads/sites/57/2019/08/no-person-200x300.png`\n                }\n                alt={original_title}\n              />\n              <div>\n                <BoxText>{name}</BoxText>\n                <BoxText>\n                  Character: <span>{character}</span>\n                </BoxText>\n              </div>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  getCast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n"],"names":["ADIT_URL","API_KEY","fetchTrending","page","axios","fetchMovies","query","fetchMovieDetails","movieId","fetchCast","fetchReviews","Box","styled","Title","MovieBox","List","ListItem","BoxText","useParams","useState","cast","setCast","useEffect","data","getCast","map","id","profile_path","name","character","original_title","src","alt"],"sourceRoot":""}